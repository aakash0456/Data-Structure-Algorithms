/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;
struct Tnode
{
    struct Tnode *lchild;
    int data;
    struct Tnode *rchild;
    
}*root=NULL;


struct Queue
{
  int size;
  int front;
  int rear;
  Tnode **Q;
};

void create (Queue  *q, int size)
{
  q->size = size;
  //q->Q = new int[size];
  q->Q=(Tnode **)malloc(q->size*sizeof(Tnode));
  q->front = 0;
  q->rear = 0;
} 

void enqueue (Queue *q, Tnode *x)
{
  if ((q->rear+1)%q->size == q->front)
    {
      cout << "Queue is full";
    }
  else
    {
      q->rear = (q->rear+1)%q->size;
      q->Q[q->rear] = x;

    }
}



void Display(Queue q)
{
  int i=q.front+1;

 do
 {

 cout<<q.Q[i];
 i=(i+1)%q.size;
 }while(i!=(q.rear+1)%q.size);

 printf("\n");
}


Tnode * dequeue (Queue  *q)
{
   Tnode *x = NULL;
  if (q->front == q->rear)
    {
      cout << "Queue is empty";
    }
  else
    {
      q->front = (q->front+1)%q->size;
      x = q->Q[q->front];
    }
  return x;
}
int isEmpty(struct Queue q)
{
    return q.front == q.rear;
  
    
}


void Tcreate()
{
    struct Tnode *p, *t;
    int x;
    Queue q;
    create(&q, 100);
    
    cout<<"Enter the root value : ";
    cin>>x;
    
    root = new Tnode;
    root->data = x;
    root->lchild = NULL;
    root->rchild = NULL;
    
    enqueue(&q, root);
    
    while(!isEmpty(q))
    {
        p = dequeue(&q);
        cout<<"Enter the left child : ";
        cin>>x;
        if(x!=-1)
        {
            t = new Tnode;
            t->data = x;
            t->lchild = NULL;
            t->rchild = NULL;
            p->lchild = t;
            enqueue(&q, t);
        }
        
        cout<<"Enter the right child : ";
        cin>>x;
        if(x!=-1)
        {
            t = new Tnode;
            t->data = x;
            t->lchild = NULL;
            t->rchild = NULL;
            p->rchild = t;
            enqueue(&q, t);
        }
        
    }
    
    
}

void preorder(Tnode *t)
{
    if(t)
    {
        cout<<t->data<<'\t';
        preorder(t->lchild);
        preorder(t->rchild);
    }
}


void LevelOrder(Tnode *t)
{
    struct Tnode *p;
    cout<<t->data<<'\t';
    Queue q;
    create(&q, 100);
    enqueue(&q,t);
    while(!isEmpty(q))
    {
        p=dequeue(&q);
        if(p->lchild)
        {
            cout<<p->lchild->data<<'\t';
            enqueue(&q,p->lchild);
        }
        
        if(p->rchild)
        {
            cout<<p->rchild->data<<'\t';
            enqueue(&q,p->rchild);
        }
    }
}

int main ()
{
  Tcreate();
  //preorder(root);
  LevelOrder(root);


  return 0;
}
